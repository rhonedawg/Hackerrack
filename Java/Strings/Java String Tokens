/*
Ross Rhone
Given a string, , matching the regular expression [A-Za-z !,?._'@]+, split the string into tokens. 
We define a token to be one or more consecutive English alphabetic letters. 
Then, print the number of tokens, followed by each token on a new line.

Note: You may find the String.split method helpful in completing this challenge.

Input Format

A single string, is composed of any of the following: 

English alphabetic letters, blank spaces, exclamation points (!), commas (,), 
question marks (?), periods (.), underscores (_), apostrophes ('), and at symbols (@).

Output Format

On the first line, print an integer, , denoting the number of tokens in string  (they do not need to be unique). 
Next, print each of the  tokens on a new line in the same order as they appear in input string .

Sample Input

He is a very very good boy, isn't he?
Sample Output

10
He
is
a
very
very
good
boy
isn
t
he
Explanation

We consider a token to be a contiguous segment of alphabetic characters. 
There are a total of  such tokens in string , and each token is printed in the same order in which it appears in string .
*/


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        boolean startLet = true; //keeps track of knowing if there has been more than one non-letter
        int count = 0;
        int len = 0;
        StringBuilder sb = new StringBuilder();
        ArrayList<String> words = new ArrayList<String>();
        
        if(!Character.isLetter(s.charAt(0))){
            startLet = false;
        }
        
        for(int i = 0; i < s.length(); i++){  //if its a letter add the sb into the arraylist
            if(!Character.isLetter(s.charAt(i)) && startLet == true){
                count++;
                words.add(sb.toString());
                sb.delete(0,len);
                len = 0;
                startLet = false;
               
            }
            else if(!Character.isLetter(s.charAt(i)) && startLet == false){
                
            }
            else{
                startLet = true;
                sb.append(s.charAt(i));
                len++;
            }
        }
        if(startLet == true){
            words.add(sb.toString());
            count++;
        }
        
        System.out.println(count);
        for(int j = 0; j < words.size(); j++){
            System.out.println(words.get(j));
        }
        scan.close();
    }
}
